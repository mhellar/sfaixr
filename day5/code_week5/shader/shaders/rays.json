{
  "id": 4210,
  "name": "New Composed Shader",
  "fragment": "precision highp float;\nprecision highp int;\nuniform float time;\nuniform float Lava1582055020240_781_contrast;\nuniform float brightness;\nuniform mat4 viewMatrix;\nuniform vec3 color;\nuniform vec3 color1;\nuniform vec3 color2;\nuniform float frequency;\nuniform float noiseScale;\nuniform float ringScale;\nuniform float Morphing_Goo_Puddle1582055084948_826_contrast;\nuniform float resolution;\nuniform float Morphing_Goo_Puddle1582055084948_826_speed;\nvec4 thresholdBlend(vec4 color1, vec4 color2, float threshold, float bleed) \n                                                        {\n                                                            if (length(color1) > threshold) \n                                                            {\n                                                                return color2 * bleed + color1;\n                                                            }\n                                                             return color1 * bleed + color2;\n                                                        }\nvarying vec3 vTexCoord3D;\nvarying vec3 Lava1582055020240_781_vNormal;\nvarying vec3 vViewPosition;\nvec4 Lava1582055020240_781_permute(vec4 x) \n                                                        {\n                                                            return mod(((x * 34.0) + 1.0) * x, 289.0);\n                                                        }\nvec4 Lava1582055020240_781_taylorInvSqrt(vec4 r) \n                                                        {\n                                                            return 1.79284291400159 - 0.85373472095314 * r;\n                                                        }\nfloat Lava1582055020240_781_snoise(vec3 v) \n                                                        {\n                                                            const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n                                                            const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n                                                            vec3 i = floor(v + dot(v, C.yyy));\n                                                            vec3 x0 = v - i + dot(i, C.xxx);\n                                                            vec3 g = step(x0.yzx, x0.xyz);\n                                                            vec3 l = 1.0 - g;\n                                                            vec3 i1 = min(g.xyz, l.zxy);\n                                                            vec3 i2 = max(g.xyz, l.zxy);\n                                                            vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n                                                            vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n                                                            vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n                                                            i = mod(i, 289.0);\n                                                            vec4 p = Lava1582055020240_781_permute(Lava1582055020240_781_permute(Lava1582055020240_781_permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n                                                            float n_ = 1.0 / 7.0;\n                                                            vec3 ns = n_ * D.wyz - D.xzx;\n                                                            vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n                                                            vec4 x_ = floor(j * ns.z);\n                                                            vec4 y_ = floor(j - 7.0 * x_);\n                                                            vec4 x = x_ * ns.x + ns.yyyy;\n                                                            vec4 y = y_ * ns.x + ns.yyyy;\n                                                            vec4 h = 1.0 - abs(x) - abs(y);\n                                                            vec4 b0 = vec4(x.xy, y.xy);\n                                                            vec4 b1 = vec4(x.zw, y.zw);\n                                                            vec4 s0 = floor(b0) * 2.0 + 1.0;\n                                                            vec4 s1 = floor(b1) * 2.0 + 1.0;\n                                                            vec4 sh = -step(h, vec4(0.0));\n                                                            vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n                                                            vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n                                                            vec3 p0 = vec3(a0.xy, h.x);\n                                                            vec3 p1 = vec3(a0.zw, h.y);\n                                                            vec3 p2 = vec3(a1.xy, h.z);\n                                                            vec3 p3 = vec3(a1.zw, h.w);\n                                                            vec4 norm = Lava1582055020240_781_taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n                                                            p0 *= norm.x;\n                                                            p1 *= norm.y;\n                                                            p2 *= norm.z;\n                                                            p3 *= norm.w;\n                                                            vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n                                                            m = m * m;\n                                                            return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));\n                                                        }\nfloat heightMap(vec3 coord) \n                                                        {\n                                                            float n = abs(Lava1582055020240_781_snoise(coord));\n                                                            n += 0.25 * abs(Lava1582055020240_781_snoise(coord * 2.0));\n                                                            n += 0.25 * abs(Lava1582055020240_781_snoise(coord * 4.0));\n                                                            n += 0.125 * abs(Lava1582055020240_781_snoise(coord * 8.0));\n                                                            n += 0.0625 * abs(Lava1582055020240_781_snoise(coord * 16.0));\n                                                            return n;\n                                                        }\nvarying vec3 Morphing_Goo_Puddle1582055084948_826_vNormal;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvec3 mod289(vec3 x) \n                                                        {\n                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                        }\nvec4 mod289(vec4 x) \n                                                        {\n                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                        }\nvec4 Morphing_Goo_Puddle1582055084948_826_permute(vec4 x) \n                                                        {\n                                                            return mod289(((x * 34.0) + 1.0) * x);\n                                                        }\nvec4 Morphing_Goo_Puddle1582055084948_826_taylorInvSqrt(vec4 r) \n                                                        {\n                                                            return 1.79284291400159 - 0.85373472095314 * r;\n                                                        }\nfloat Morphing_Goo_Puddle1582055084948_826_snoise(vec3 v) \n                                                        {\n                                                            const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n                                                            const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n                                                            vec3 i = floor(v + dot(v, C.yyy));\n                                                            vec3 x0 = v - i + dot(i, C.xxx);\n                                                            vec3 g = step(x0.yzx, x0.xyz);\n                                                            vec3 l = 1.0 - g;\n                                                            vec3 i1 = min(g.xyz, l.zxy);\n                                                            vec3 i2 = max(g.xyz, l.zxy);\n                                                            vec3 x1 = x0 - i1 + C.xxx;\n                                                            vec3 x2 = x0 - i2 + C.yyy;\n                                                            vec3 x3 = x0 - D.yyy;\n                                                            i = mod289(i);\n                                                            vec4 p = Morphing_Goo_Puddle1582055084948_826_permute(Morphing_Goo_Puddle1582055084948_826_permute(Morphing_Goo_Puddle1582055084948_826_permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n                                                            float n_ = 0.142857142857;\n                                                            vec3 ns = n_ * D.wyz - D.xzx;\n                                                            vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n                                                            vec4 x_ = floor(j * ns.z);\n                                                            vec4 y_ = floor(j - 7.0 * x_);\n                                                            vec4 x = x_ * ns.x + ns.yyyy;\n                                                            vec4 y = y_ * ns.x + ns.yyyy;\n                                                            vec4 h = 1.0 - abs(x) - abs(y);\n                                                            vec4 b0 = vec4(x.xy, y.xy);\n                                                            vec4 b1 = vec4(x.zw, y.zw);\n                                                            vec4 s0 = floor(b0) * 2.0 + 1.0;\n                                                            vec4 s1 = floor(b1) * 2.0 + 1.0;\n                                                            vec4 sh = -step(h, vec4(0.0));\n                                                            vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n                                                            vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n                                                            vec3 p0 = vec3(a0.xy, h.x);\n                                                            vec3 p1 = vec3(a0.zw, h.y);\n                                                            vec3 p2 = vec3(a1.xy, h.z);\n                                                            vec3 p3 = vec3(a1.zw, h.w);\n                                                            vec4 norm = Morphing_Goo_Puddle1582055084948_826_taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n                                                            p0 *= norm.x;\n                                                            p1 *= norm.y;\n                                                            p2 *= norm.z;\n                                                            p3 *= norm.w;\n                                                            vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n                                                            m = m * m;\n                                                            return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));\n                                                        }\nvec4 Lava1582055020240_781_main(void) \n                                                        {\n                                                            vec4 Lava1582055020240_781_gl_FragColor = vec4(0.0);\n                                                            float n = heightMap(vTexCoord3D);\n                                                            vec3 baseColor = color * vec3(color.r * 1.5 - n + 0.5, color.g - n + 0.5, color.b * 0.5 - n + 0.5);\n                                                            const float e = 0.001;\n                                                            float nx = heightMap(vTexCoord3D + vec3(e, 0.0, 0.0));\n                                                            float ny = heightMap(vTexCoord3D + vec3(0.0, e, 0.0));\n                                                            float nz = heightMap(vTexCoord3D + vec3(0.0, 0.0, e));\n                                                            vec3 normal = normalize(Lava1582055020240_781_vNormal + Lava1582055020240_781_contrast * vec3(n - nx, n - ny, n - nz) / e);\n                                                            vec3 vLightWeighting = vec3(0.1) * brightness;\n                                                            vec4 lDirection = viewMatrix * vec4(normalize(vec3(1.0, 0.0, 0.5)), 0.0);\n                                                            float directionalLightWeighting = dot(normal, normalize(lDirection.xyz)) * 0.25 + 0.75;\n                                                            vLightWeighting += vec3(1.0) * directionalLightWeighting;\n                                                            vec3 dirHalfVector = normalize(lDirection.xyz + normalize(vViewPosition));\n                                                            float dirDotNormalHalf = dot(normal, dirHalfVector);\n                                                            float dirSpecularWeight = 0.0;\n                                                            if (dirDotNormalHalf >= 0.0) dirSpecularWeight = (1.0 - n) * pow(dirDotNormalHalf, 5.0);\n                                                             vLightWeighting += color * dirSpecularWeight * n * 2.0;\n                                                            Lava1582055020240_781_gl_FragColor = vec4(baseColor * vLightWeighting, 1.0);\n                                                            return Lava1582055020240_781_gl_FragColor *= 0.6;\n                                                        }\nvec4 Morphing_Goo_Puddle1582055084948_826_main() \n                                                        {\n                                                            vec4 Morphing_Goo_Puddle1582055084948_826_gl_FragColor = vec4(0.0);\n                                                            float n = Morphing_Goo_Puddle1582055084948_826_snoise(vPosition * resolution);\n                                                            float ring = fract((0.5 + 0.5 * cos(time * Morphing_Goo_Puddle1582055084948_826_speed)) * frequency * vPosition.z + noiseScale * n);\n                                                            ring *= Morphing_Goo_Puddle1582055084948_826_contrast * ((0.5 + 0.5 * sin(time * Morphing_Goo_Puddle1582055084948_826_speed)) - ring);\n                                                            float lerp = pow(ring, ringScale) + n;\n                                                            vec3 base = mix(color1, color2, lerp);\n                                                            Morphing_Goo_Puddle1582055084948_826_gl_FragColor = vec4(base, 1.0);\n                                                            return Morphing_Goo_Puddle1582055084948_826_gl_FragColor *= 1.0;\n                                                        }\nvoid main() \n                                                        {\n                                                            gl_FragColor = thresholdBlend(\n            Lava1582055020240_781_main(),\n            Morphing_Goo_Puddle1582055084948_826_main(),\n            1.0,\n            0.5\n        );                                                        }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float Lava1582055020240_781_speed;\nuniform float time;\nuniform float scale;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvec4 thresholdBlend(vec4 color1, vec4 color2, float threshold, float bleed) \n                                                        {\n                                                            if (length(color1) > threshold) \n                                                            {\n                                                                return color2 * bleed + color1;\n                                                            }\n                                                             return color1 * bleed + color2;\n                                                        }\nvarying vec3 vTexCoord3D;\nvarying vec3 Lava1582055020240_781_vNormal;\nvarying vec3 vViewPosition;\nvarying vec3 vPosition;\nvarying vec3 Morphing_Goo_Puddle1582055084948_826_vNormal;\nvarying vec2 vUv;\nvec4 Lava1582055020240_781_main(void) \n                                                        {\n                                                            vec4 Lava1582055020240_781_gl_Position = vec4(0.0);\n                                                            vec4 mPosition = modelMatrix * vec4(position, 1.0);\n                                                            Lava1582055020240_781_vNormal = normalize(normalMatrix * normal);\n                                                            vViewPosition = cameraPosition - mPosition.xyz;\n                                                            vTexCoord3D = scale * (position.xyz + vec3(0.0, 0.0, time * Lava1582055020240_781_speed));\n                                                            Lava1582055020240_781_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                            return Lava1582055020240_781_gl_Position *= 0.6;\n                                                        }\nvec4 Morphing_Goo_Puddle1582055084948_826_main() \n                                                        {\n                                                            vec4 Morphing_Goo_Puddle1582055084948_826_gl_Position = vec4(0.0);\n                                                            Morphing_Goo_Puddle1582055084948_826_vNormal = normal;\n                                                            vUv = uv;\n                                                            vPosition = position;\n                                                            Morphing_Goo_Puddle1582055084948_826_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                            return Morphing_Goo_Puddle1582055084948_826_gl_Position *= 1.0;\n                                                        }\nvoid main() \n                                                        {\n                                                            gl_Position = Lava1582055020240_781_main() + Morphing_Goo_Puddle1582055084948_826_main();                                                        }\n",
  "uniforms": {
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "scale": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "brightness": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "Lava1582055020240_781_contrast": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "Lava1582055020240_781_speed": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "color": {
      "value": {
        "r": 0.4,
        "g": 0,
        "b": 0.9529411764705882
      },
      "type": "c",
      "glslType": "vec3"
    },
    "color1": {
      "value": {
        "r": 0,
        "g": 0.1803921568627451,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    },
    "color2": {
      "value": {
        "r": 1,
        "g": 0,
        "b": 0.49411764705882355
      },
      "type": "c",
      "glslType": "vec3"
    },
    "frequency": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "noiseScale": {
      "value": "3",
      "type": "f",
      "glslType": "float"
    },
    "ringScale": {
      "value": "0.6",
      "type": "f",
      "glslType": "float"
    },
    "resolution": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "Morphing_Goo_Puddle1582055084948_826_contrast": {
      "value": "4",
      "type": "f",
      "glslType": "float"
    },
    "Morphing_Goo_Puddle1582055084948_826_speed": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    }
  },
  "url": "http://shaderfrog.com/app/view/4210",
  "user": {
    "username": "mhellar",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}